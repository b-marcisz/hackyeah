// –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã number_associations
const fs = require('fs');
const { exec } = require('child_process');

console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã
function executeSQL(sql) {
  return new Promise((resolve, reject) => {
    const command = `docker exec postgres-cards psql -U postgres -d postgres -c "${sql}"`;
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error);
      } else {
        resolve(stdout);
      }
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
async function exportTableData() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å is_primary = true
    const dataResult = await executeSQL(`
      SELECT number, hero, action, object, explanation, is_primary, rating, total_votes, created_at 
      FROM number_associations 
      WHERE is_primary = true 
      ORDER BY number;
    `);
    
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
    
    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const lines = dataResult.split('\n');
    const dataLines = lines.filter(line => line.includes('|') && !line.includes('number'));
    
    let sqlContent = `-- –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã number_associations
-- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toISOString()}
-- –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å is_primary = true

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
CREATE TABLE IF NOT EXISTS number_associations (
    id SERIAL PRIMARY KEY,
    number INTEGER NOT NULL,
    hero VARCHAR(255) NOT NULL,
    action VARCHAR(255) NOT NULL,
    object VARCHAR(255) NOT NULL,
    explanation TEXT,
    is_primary BOOLEAN DEFAULT false,
    rating DECIMAL(3,2) DEFAULT 0.00,
    total_votes INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
ALTER TABLE number_associations ADD CONSTRAINT IF NOT EXISTS unique_hero UNIQUE (hero);
ALTER TABLE number_associations ADD CONSTRAINT IF NOT EXISTS unique_action UNIQUE (action);
ALTER TABLE number_associations ADD CONSTRAINT IF NOT EXISTS unique_object UNIQUE (object);

-- –í—Å—Ç–∞–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
INSERT INTO number_associations (number, hero, action, object, explanation, is_primary, rating, total_votes, created_at) VALUES
`;

    const values = [];
    
    dataLines.forEach(line => {
      const parts = line.split('|').map(part => part.trim());
      if (parts.length >= 9) {
        const number = parts[0];
        const hero = parts[1].replace(/'/g, "''");
        const action = parts[2].replace(/'/g, "''");
        const object = parts[3].replace(/'/g, "''");
        const explanation = parts[4] ? parts[4].replace(/'/g, "''") : '';
        const is_primary = parts[5] === 't';
        const rating = parts[6] || '0.00';
        const total_votes = parts[7] || '0';
        const created_at = parts[8] || 'CURRENT_TIMESTAMP';
        
        values.push(`(${number}, '${hero}', '${action}', '${object}', '${explanation}', ${is_primary}, ${rating}, ${total_votes}, '${created_at}')`);
      }
    });
    
    sqlContent += values.join(',\n') + ';\n';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync('/Users/nikita/projects/hackyeah/export_current_table.sql', sqlContent);
    
    console.log('‚úÖ SQL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: export_current_table.sql');
    console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${values.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = await executeSQL(`
      SELECT 
        COUNT(*) as total_records,
        COUNT(DISTINCT hero) as unique_heroes,
        COUNT(DISTINCT action) as unique_actions,
        COUNT(DISTINCT object) as unique_objects
      FROM number_associations 
      WHERE is_primary = true;
    `);
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã:');
    console.log(statsResult);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
exportTableData();
