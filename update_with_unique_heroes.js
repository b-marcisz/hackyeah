// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è number_associations —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ –∏–∑ unique-action.ts
const fs = require('fs');
const { exec } = require('child_process');

console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ unique-action.ts...');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª unique-action.ts –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã (–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç –≥–µ—Ä–æ—è–º–∏)
function getHeroesFromFile() {
  const content = fs.readFileSync('/Users/nikita/projects/hackyeah/BE/unique-action.ts', 'utf8');
  const heroes = content.match(/"([^"]+)"/g).map(s => s.slice(1, -1));
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${heroes.length} –≥–µ—Ä–æ–µ–≤ –≤ —Ñ–∞–π–ª–µ`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueHeroes = [...new Set(heroes)];
  console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤: ${uniqueHeroes.length}`);
  
  if (heroes.length !== uniqueHeroes.length) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! –£–¥–∞–ª—è–µ–º –∏—Ö...');
    return uniqueHeroes;
  }
  
  return heroes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã
function executeSQL(sql) {
  return new Promise((resolve, reject) => {
    const command = `docker exec postgres-cards psql -U postgres -d postgres -c "${sql}"`;
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error);
      } else {
        resolve(stdout);
      }
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function updateWithUniqueHeroes() {
  try {
    const heroes = getHeroesFromFile();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const countResult = await executeSQL("SELECT COUNT(*) FROM number_associations WHERE is_primary = true;");
    console.log('üìà –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', countResult.trim());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≥–µ—Ä–æ–µ–≤
    console.log('üîç –¢–µ–∫—É—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≥–µ—Ä–æ–µ–≤:');
    const duplicatesBefore = await executeSQL("SELECT hero, COUNT(*) FROM number_associations WHERE is_primary = true GROUP BY hero HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;");
    console.log(duplicatesBefore);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for (let i = 0; i < heroes.length; i++) {
      const hero = heroes[i].replace(/'/g, "''"); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      const sql = `UPDATE number_associations SET hero = '${hero}' WHERE number = ${i} AND is_primary = true;`;
      
      try {
        await executeSQL(sql);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≥–µ—Ä–æ–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${i}: "${heroes[i]}"`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ ${i}:`, error.message);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const uniqueResult = await executeSQL("SELECT COUNT(DISTINCT hero) as unique_heroes, COUNT(hero) as total_heroes FROM number_associations WHERE is_primary = true;");
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(uniqueResult);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicatesResult = await executeSQL("SELECT hero, COUNT(*) FROM number_associations WHERE is_primary = true GROUP BY hero HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;");
    console.log('üìä –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(duplicatesResult);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const sampleResult = await executeSQL("SELECT number, hero FROM number_associations WHERE is_primary = true ORDER BY number LIMIT 10;");
    console.log('üìã –ü–µ—Ä–≤—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
    console.log(sampleResult);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateWithUniqueHeroes();
