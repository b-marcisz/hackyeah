// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è hero, action, object
const fs = require('fs');
const path = require('path');
const https = require('https');
const { exec } = require('child_process');

console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã
function executeSQL(sql) {
  return new Promise((resolve, reject) => {
    const command = `docker exec postgres-cards psql -U postgres -d postgres -c "${sql}"`;
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error);
      } else {
        resolve(stdout);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Google Custom Search API
async function searchImages(query, type) {
  const searchQuery = encodeURIComponent(query);
  const url = `https://www.googleapis.com/customsearch/v1?key=YOUR_API_KEY&cx=YOUR_SEARCH_ENGINE_ID&q=${searchQuery}&searchType=image&num=1&safe=active`;
  
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω Google Custom Search API
  console.log(`üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${query}" (${type})`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É URL
  return `https://via.placeholder.com/300x300/FF6B6B/FFFFFF?text=${encodeURIComponent(query)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(url, filePath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filePath);
    
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve(filePath);
      });
    }).on('error', (err) => {
      fs.unlink(filePath, () => {}); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      reject(err);
    });
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
function createDirectories() {
  const dirs = ['images/heroes', 'images/actions', 'images/objects'];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function downloadAllImages() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    const dataResult = await executeSQL(`
      SELECT number, hero, action, object 
      FROM number_associations 
      WHERE is_primary = true 
      ORDER BY number;
    `);
    
    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const lines = dataResult.split('\n');
    const dataLines = lines.filter(line => line.includes('|') && !line.includes('number'));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${dataLines.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    createDirectories();
    
    let processed = 0;
    
    for (const line of dataLines) {
      const parts = line.split('|').map(part => part.trim());
      if (parts.length >= 4) {
        const number = parts[0];
        const hero = parts[1];
        const action = parts[2];
        const object = parts[3];
        
        console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä ${number}:`);
        console.log(`   Hero: ${hero}`);
        console.log(`   Action: ${action}`);
        console.log(`   Object: ${object}`);
        
        try {
          // –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ—Ä–æ—è
          const heroUrl = await searchImages(`${hero} Disney character`, 'hero');
          const heroPath = `images/heroes/${number}_${hero.toLowerCase().replace(/\s+/g, '_')}.jpg`;
          await downloadImage(heroUrl, heroPath);
          console.log(`   ‚úÖ Hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${heroPath}`);
          
          // –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
          const actionUrl = await searchImages(`${action} action icon`, 'action');
          const actionPath = `images/actions/${number}_${action.toLowerCase().replace(/\s+/g, '_')}.jpg`;
          await downloadImage(actionUrl, actionPath);
          console.log(`   ‚úÖ Action –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${actionPath}`);
          
          // –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
          const objectUrl = await searchImages(`${object} toy object`, 'object');
          const objectPath = `images/objects/${number}_${object.toLowerCase().replace(/\s+/g, '_')}.jpg`;
          await downloadImage(objectUrl, objectPath);
          console.log(`   ‚úÖ Object –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${objectPath}`);
          
          processed++;
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ ${number}:`, error.message);
        }
      }
    }
    
    console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const heroFiles = fs.readdirSync('images/heroes').length;
    const actionFiles = fs.readdirSync('images/actions').length;
    const objectFiles = fs.readdirSync('images/objects').length;
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:`);
    console.log(`   Heroes: ${heroFiles} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   Actions: ${actionFiles} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   Objects: ${objectFiles} —Ñ–∞–π–ª–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
downloadAllImages();
