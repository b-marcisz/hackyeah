/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—É–ª–∞ –≤ –ë–î
 */

import React from 'react';
import { PoolIncrementVerificationResult } from '../../utils/poolIncrementVerification';

interface PoolIncrementStatusProps {
  verificationResult: PoolIncrementVerificationResult;
  className?: string;
  showDetails?: boolean;
}

export const PoolIncrementStatus: React.FC<PoolIncrementStatusProps> = ({
  verificationResult,
  className = '',
  showDetails = false
}) => {
  const getStatusIcon = (): string => {
    if (verificationResult.errors.length > 0) return '‚ùå';
    if (verificationResult.warnings.length > 0) return '‚ö†Ô∏è';
    if (verificationResult.success && verificationResult.incrementVerified) return '‚úÖ';
    if (verificationResult.success) return '‚úÖ';
    return '‚è≥';
  };
  
  const getStatusColor = (): string => {
    if (verificationResult.errors.length > 0) return 'text-red-400';
    if (verificationResult.warnings.length > 0) return 'text-yellow-400';
    if (verificationResult.success && verificationResult.incrementVerified) return 'text-green-400';
    if (verificationResult.success) return 'text-blue-400';
    return 'text-gray-400';
  };
  
  const getStatusText = (): string => {
    if (verificationResult.errors.length > 0) return 'Verification Failed';
    if (verificationResult.warnings.length > 0) return 'Verified with Warnings';
    if (verificationResult.success && verificationResult.incrementVerified) return 'Increment Verified';
    if (verificationResult.success) return 'Verified';
    return 'Verifying...';
  };
  
  return (
    <div className={`bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-6 shadow-xl border-2 border-gray-600 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-bold text-white flex items-center space-x-2">
          <span>üóÑÔ∏è</span>
          <span>Pool Increment Verification</span>
        </h3>
        <div className="flex items-center space-x-2">
          <span className="text-2xl">{getStatusIcon()}</span>
          <span className={`text-lg font-semibold ${getStatusColor()}`}>
            {getStatusText()}
          </span>
        </div>
      </div>
      
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="bg-gray-700/50 rounded-lg p-3">
          <div className="text-sm text-gray-400">Current Pool</div>
          <div className="text-lg font-bold text-white">
            {verificationResult.currentPool}
          </div>
        </div>
        <div className="bg-gray-700/50 rounded-lg p-3">
          <div className="text-sm text-gray-400">Expected Pool</div>
          <div className="text-lg font-bold text-blue-400">
            {verificationResult.expectedPool}
          </div>
        </div>
      </div>
      
      {/* –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="bg-gray-700/50 rounded-lg p-3">
          <div className="text-sm text-gray-400">Actual Pool in DB</div>
          <div className="text-lg font-bold text-purple-400">
            {verificationResult.actualPool}
          </div>
        </div>
        <div className="bg-gray-700/50 rounded-lg p-3">
          <div className="text-sm text-gray-400">Attempts</div>
          <div className="text-lg font-bold text-orange-400">
            {verificationResult.attempts}/{verificationResult.maxAttempts}
          </div>
        </div>
      </div>
      
      {/* –§–ª–∞–≥–∏ */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <span className={verificationResult.success ? 'text-green-400' : 'text-red-400'}>
              {verificationResult.success ? '‚úÖ' : '‚ùå'}
            </span>
            <span className="text-sm text-gray-300">Verification Success</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className={verificationResult.incrementVerified ? 'text-green-400' : 'text-red-400'}>
              {verificationResult.incrementVerified ? '‚úÖ' : '‚ùå'}
            </span>
            <span className="text-sm text-gray-300">Increment Verified</span>
          </div>
        </div>
        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <span className="text-blue-400">‚è±Ô∏è</span>
            <span className="text-sm text-gray-300">Timeout: {verificationResult.timeout}ms</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="text-purple-400">üïê</span>
            <span className="text-sm text-gray-300">
              {new Date(verificationResult.timestamp).toLocaleTimeString()}
            </span>
          </div>
        </div>
      </div>
      
      {/* –î–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã) */}
      {showDetails && (
        <div className="space-y-3">
          {/* –û—à–∏–±–∫–∏ */}
          {verificationResult.errors.length > 0 && (
            <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-3">
              <div className="text-sm font-semibold text-red-400 mb-2">Errors:</div>
              {verificationResult.errors.map((error, index) => (
                <div key={index} className="text-sm text-red-300">‚Ä¢ {error}</div>
              ))}
            </div>
          )}
          
          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          {verificationResult.warnings.length > 0 && (
            <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-3">
              <div className="text-sm font-semibold text-yellow-400 mb-2">Warnings:</div>
              {verificationResult.warnings.map((warning, index) => (
                <div key={index} className="text-sm text-yellow-300">‚Ä¢ {warning}</div>
              ))}
            </div>
          )}
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ */}
          {verificationResult.success && (
            <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-3">
              <div className="text-sm font-semibold text-green-400 mb-2">Verification Details:</div>
              <div className="text-sm text-green-300">
                ‚Ä¢ Pool successfully incremented from {verificationResult.currentPool} to {verificationResult.actualPool}
              </div>
              <div className="text-sm text-green-300">
                ‚Ä¢ Verification completed in {verificationResult.attempts} attempt(s)
              </div>
              <div className="text-sm text-green-300">
                ‚Ä¢ Database update confirmed
              </div>
            </div>
          )}
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—É–¥–∞—á–µ */}
          {!verificationResult.success && (
            <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-3">
              <div className="text-sm font-semibold text-red-400 mb-2">Verification Failed:</div>
              <div className="text-sm text-red-300">
                ‚Ä¢ Pool increment verification failed after {verificationResult.attempts} attempts
              </div>
              <div className="text-sm text-red-300">
                ‚Ä¢ Expected pool: {verificationResult.expectedPool}, Actual pool: {verificationResult.actualPool}
              </div>
              <div className="text-sm text-red-300">
                ‚Ä¢ Check database connection and pool advancement logic
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default PoolIncrementStatus;
