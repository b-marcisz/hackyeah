/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import { runStudyModeValidation } from './validateStudyModeConfig';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
 */
export async function preStartCheck(): Promise<boolean> {
  console.log('üöÄ Starting Pre-Start Check...');
  console.log('==============================');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é StudyMode
    const studyModeValid = await runStudyModeValidation();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ)
    const additionalChecks = [
      {
        name: 'Environment Variables',
        check: () => {
          const requiredEnvVars = ['REACT_APP_API_URL'];
          const missing = requiredEnvVars.filter(envVar => !process.env[envVar]);
          return missing.length === 0;
        }
      },
      {
        name: 'API Connectivity',
        check: async () => {
          try {
            const apiUrl = process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`;
            const response = await fetch(`${apiUrl}/user-progress`);
            return response.ok;
          } catch {
            return false;
          }
        }
      }
    ];
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    let allChecksPassed = studyModeValid;
    
    console.log('\nüîç Additional Checks:');
    console.log('=====================');
    
    for (const check of additionalChecks) {
      try {
        const result = await check.check();
        const icon = result ? '‚úÖ' : '‚ùå';
        console.log(`${icon} ${check.name}: ${result ? 'PASSED' : 'FAILED'}`);
        if (!result) allChecksPassed = false;
      } catch (error) {
        console.log(`‚ùå ${check.name}: ERROR - ${error}`);
        allChecksPassed = false;
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüéØ Pre-Start Check Results:');
    console.log('===========================');
    console.log(`StudyMode Configuration: ${studyModeValid ? '‚úÖ VALID' : '‚ùå INVALID'}`);
    console.log(`Additional Checks: ${allChecksPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
    console.log(`Overall Status: ${allChecksPassed ? '‚úÖ READY TO START' : '‚ùå NEEDS ATTENTION'}`);
    
    if (allChecksPassed) {
      console.log('\nüéâ All checks passed! Application is ready to start.');
    } else {
      console.log('\n‚ö†Ô∏è Some checks failed! Please fix the issues above.');
    }
    
    return allChecksPassed;
    
  } catch (error) {
    console.error('‚ùå Error during pre-start check:', error);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
export async function runPreStartCheck(): Promise<boolean> {
  return await preStartCheck();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default {
  preStartCheck,
  runPreStartCheck
};
