import { Controller, Get, Post, Body, Logger } from '@nestjs/common';
import { UserProgressService } from './user-progress.service';
import { NumberAssociation } from '../../entities/number-association.entity';

interface AnswerRequest {
  number: number;
  hero: string;
  action: string;
  object: string;
}

interface ProgressResponse {
  currentProgress: number;
  currentPool: number;
  completedNumbers: number[];
  failedAttempts: number[];
  totalCorrectAnswers: number;
  totalIncorrectAnswers: number;
  studyTimeSpent: number;
  testTimeSpent: number;
}

@Controller('user-progress')
export class UserProgressController {
  private readonly logger = new Logger(UserProgressController.name);

  constructor(private readonly userProgressService: UserProgressService) {}

  // GET /user-progress - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  @Get()
  async getCurrentProgress(): Promise<ProgressResponse> {
    this.logger.log('üìä Getting current user progress...');
    
    const stats = await this.userProgressService.getUserStats();
    
    this.logger.log(`‚úÖ Progress: ${stats.currentProgress}%, Pool: ${stats.currentPool}-${stats.currentPool + 2}`);
    return stats;
  }

  // GET /user-progress/study - –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  @Get('study')
  async getAssociationsForStudy(): Promise<NumberAssociation[]> {
    this.logger.log('üìö Getting associations for study...');
    
    const associations = await this.userProgressService.getAssociationsForStudy();
    
    this.logger.log(`‚úÖ Returning ${associations.length} associations for study`);
    return associations;
  }

  // GET /user-progress/test - –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  @Get('test')
  async getAssociationsForTest(): Promise<NumberAssociation[]> {
    this.logger.log('üß™ Getting associations for test...');
    
    const associations = await this.userProgressService.getAssociationsForTest();
    
    this.logger.log(`‚úÖ Returning ${associations.length} shuffled associations for test`);
    return associations;
  }

  // POST /user-progress/answer - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
  @Post('answer')
  async checkAnswer(@Body() answerRequest: AnswerRequest): Promise<{
    isCorrect: boolean;
    correctAnswer?: {
      hero: string;
      action: string;
      object: string;
    };
  }> {
    this.logger.log(`üîç Checking answer for number ${answerRequest.number}`);
    
    const isCorrect = await this.userProgressService.checkAnswer(
      answerRequest.number,
      answerRequest.hero,
      answerRequest.action,
      answerRequest.object
    );

    let correctAnswer: { hero: string; action: string; object: string } | undefined = undefined;
    if (!isCorrect) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const progress = await this.userProgressService.getCurrentProgress();
      const associations = await this.userProgressService.getAssociationsForStudy();
      const correctAssociation = associations.find(a => a.number === answerRequest.number);
      
      if (correctAssociation) {
        correctAnswer = {
          hero: correctAssociation.hero,
          action: correctAssociation.action,
          object: correctAssociation.object,
        };
      }
    }

    this.logger.log(`‚úÖ Answer is ${isCorrect ? 'correct' : 'incorrect'}`);
    return { isCorrect, correctAnswer };
  }

  // POST /user-progress/update - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  @Post('update')
  async updateProgress(@Body() updateRequest: {
    success: boolean;
    number: number;
  }): Promise<ProgressResponse> {
    this.logger.log(`üîÑ Updating progress: success=${updateRequest.success}, number=${updateRequest.number}`);
    
    await this.userProgressService.updateProgress(updateRequest.success, updateRequest.number);
    const stats = await this.userProgressService.getUserStats();
    
    this.logger.log(`‚úÖ Progress updated: ${stats.currentProgress}%`);
    return stats;
  }

  // POST /user-progress/reset - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  @Post('reset')
  async resetProgress(): Promise<ProgressResponse> {
    this.logger.log('üîÑ Resetting user progress...');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const progress = await this.userProgressService.getCurrentProgress();
    progress.currentProgress = 0;
    progress.currentPool = 0;
    progress.currentNumber = 0;
    progress.completedNumbers = [];
    progress.failedAttempts = [];
    progress.completedPools = [];
    progress.totalCorrectAnswers = 0;
    progress.totalIncorrectAnswers = 0;
    progress.studyTimeSpent = 0;
    progress.testTimeSpent = 0;
    
    await this.userProgressService['userProgressRepository'].save(progress);
    
    this.logger.log('‚úÖ Progress reset to 0%');
    return await this.userProgressService.getUserStats();
  }

  // POST /user-progress/advance-pool - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–ª—É
  @Post('advance-pool')
  async advancePool(@Body() advanceRequest: {
    currentPool: number;
    poolSize: number;
    lastUpdated: string;
  }): Promise<ProgressResponse> {
    this.logger.log(`üèä Advancing pool: currentPool=${advanceRequest.currentPool}, poolSize=${advanceRequest.poolSize}`);
    
    const stats = await this.userProgressService.advancePool(
      advanceRequest.currentPool,
      advanceRequest.poolSize
    );
    
    this.logger.log(`‚úÖ Pool advanced to: ${stats.currentPool}`);
    return stats;
  }
}